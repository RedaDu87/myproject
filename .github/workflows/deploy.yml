name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17 (for Spring Boot backend)
      uses: actions/setup-java@v3
      with:
        java-version: '17'

    - name: Set up Node.js (for Angular frontend)
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install backend dependencies
      working-directory: ./backend
      run: ./mvnw clean install

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build Angular frontend
      working-directory: ./frontend
      run: npm run build --prod

    - name: Create Docker images for backend and frontend
      run: |
        docker build -t myproject-backend ./backend
        docker build -t myproject-frontend ./frontend

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker images
      run: |
        docker tag myproject-backend:latest ${{ secrets.DOCKER_USERNAME }}/myproject-backend:latest
        docker tag myproject-frontend:latest ${{ secrets.DOCKER_USERNAME }}/myproject-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myproject-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myproject-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install SSH client
      run: sudo apt-get install -y sshpass

    - name: Deploy via SSH
      env:
        SSH_PASS: ${{ secrets.SSH_PASS }}
      run: |
        sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
        cd /path/to/docker-compose
        docker-compose pull
        docker stack deploy -c docker-compose.yml myproject-stack
        EOF
