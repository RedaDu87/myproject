name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.5
        env:
          MYSQL_ROOT_PASSWORD: rootpassword  # Mot de passe pour l'utilisateur root
          MYSQL_DATABASE: ma_base_de_donnees  # Nom de la base de données à créer
          MYSQL_USER: delta                  # Utilisateur spécifique
          MYSQL_PASSWORD: delta
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17 (for Spring Boot backend)
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js (for Angular frontend)
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Give execute permission to mvnw
      working-directory: ./backend
      run: chmod +x mvnw

    - name: Install backend dependencies
      working-directory: ./backend
      run: ./mvnw clean install

      env:
        SPRING_DATASOURCE_URL: jdbc:mariadb://localhost:3306/ma_base_de_donnees
        SPRING_DATASOURCE_USERNAME: delta
        SPRING_DATASOURCE_PASSWORD: delta

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build Angular frontend
      working-directory: ./frontend
      run: npm run build --prod

    - name: Create Docker images for backend and frontend
      run: |
        docker build -t myproject-backend ./backend
        docker build -t myproject-frontend ./frontend

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker images
      run: |
        docker tag myproject-backend:latest ${{ secrets.DOCKER_USERNAME }}/myproject-backend:latest
        docker tag myproject-frontend:latest ${{ secrets.DOCKER_USERNAME }}/myproject-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myproject-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myproject-frontend:latest

  deploy:
  runs-on: ubuntu-latest
  needs: build
  steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Install SSH client and sshpass
    run: sudo apt-get install -y sshpass

  - name: Deploy via SSH
    env:
      SSHPASS: ${{ secrets.SSH_PASS }}  # Utiliser le mot de passe depuis les secrets GitHub
    run: |
      sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
      sudo apt-get update
      sudo apt-get install -y docker-compose

      # Ajoute l'utilisateur actuel au groupe docker pour éviter les problèmes de permission
      sudo usermod -aG docker $USER

      # Exécute les commandes Docker (après avoir installé docker-compose et ajouté les permissions)
      cd /path/to/docker-compose
      docker-compose pull
      docker stack deploy -c docker-compose.yml myproject-stack
      EOF

